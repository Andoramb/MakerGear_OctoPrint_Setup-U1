    <div id="mgtabwarning" style="display: inline"><center><br><p style="font-size:60px">LOADING</p><br><br>If you can see this, OctoPrint and the MakerGear Setup tab are still loading; if this does not change shortly, a popup or script blocker may be preventing the page from loading correctly.</center></div>
<div id="mglogin" style="visibility: hidden" data-bind="visible: loginState.loggedIn() === false"><center><br><br>You are not logged into OctoPrint. Use the "Login" button in the upper right corner to continue. You can find the default username and password in the setup guide.<br><br></center></div>

<div id="mgtab" style="visibility: hidden" data-bind="visible: loginState.isUser">



<div class="fileupload-new thumbnail" style="width: 95%; " data-bind="visible: loginState.isUser">
<br>
                <div class="progress">
                    <div class="progress bar-warning" role="progressbar" aria-valuemin="0" aria-valuemax="parseFloat(maxSteps())" data-bind="style: {width: ((parseFloat(setupStep())) * (100/parseFloat(maxSteps()))) + '%'} "></div>
                </div>

        <h5 data-bind=" visible: loginState.isUser && setupStep()!=='0'"><center>NOTE: Do not refresh during the setup process, or you will need to start over from the beginning.</center></h5>
        </div>



{#                  
       ,a8888a,     
     ,8P"'  `"Y8,   
    ,8P        Y8,  
    88          88  
    88          88  
    `8b        d8'  
     `8ba,  ,ad8'   
       "Y8888P"     
                    
                  #}
{# Welcome #}
<center>
<div class="jog-panel" style="display: none;" data-bind="visible: loginState.isUser && setupStep()==='0'">
    <h3>Welcome to the MakerGear M3 Quick Start Plugin!</h3>
    <div data-bind="visible: ($root.googleGood()===-1)"><p>    We're currently checking your Internet Connection Status.</p>
    </div>
    <div data-bind="visible: $root.googleGood()===0"> 
    <p>
        You are <span style="color:red"> NOT </span> connected to the Internet. Please connect an Ethernet cable or use the "Wireless Configuration" button below to connect your M3 3D Printer to an Internet enabled network.
                    <center><button style="width:150px;height:100px;" class="btngo" data-bind="visible: loginState.isUser, click: function() {$root.showSettings()}">
                    <img data-bind="attr: {'src': '/plugin/mgsetup/static/img/wifiWhite.png', 'width': '50px',} , visible: loginState.isUser && (setupStep()==='0')" />
                    <br />Wireless Configuration</button></center>
                    <br />
        <button data-bind="click: function() { $root.checkGoogle() }"> Check Internet Connection Again</button><br>
    </p>
      </div> 
    <div data-bind="visible: $root.googleGood()===1"><p>
        You are connected to the Internet - please proceed to Quick Check 
    </p></div>
<hr />
                <center> <button style="width:150px;height:100px;" class="btngo" data-bind="enable: isOperational() && !isPrinting() && loginState.isUser(), click: function() { $root.goTo('1'); window.scroll(0,0) }"><span class="icon-gear" style="font-size:40px;"></span><br /> {{ _('Begin Quick Check') }}</button></center>
<hr />
<br />
                <center> <button style="width:150px;height:100px;" class="btngo"  onClick="window.open('https://makergear.zendesk.com/hc/en-us/categories/115000563646-M3','_blank','menubar=yes,resizable=yes,height=520,width=740'); return false;" ><span class="icon-book" style="font-size:40px;"></span><br /> {{ _('Knowledge Base') }}</button></center>
</div>
</center>

{#        88    #}
{#      ,d88    #}
{#    888888    #}
{#        88    #}
{#        88    #}
{#        88    #}
{#        88    #}
{#        88    #}
{# STARTING HEIGHT CHECK #}
<div class="jog-panel" style="display: none;" data-bind="visible: loginState.isUser && setupStep()==='1'">
<center>Before proceeding, please make sure that you have read and completed all of the tasks in the manual that came with your printer. </center>
<h1 style="text-align:left;">Starting Height Check</h1>
<p style="text-align:left;">
First you need to ensure that your factory settings are correct. Click <strong>Prepare</strong> to move the printer to its testing position.<br><br>
</p>
<center>
<button id="control-yinc" class="btnstay" data-bind="enable: isOperational() && !isPrinting() && loginState.isUser() && !$root.stepOnePrepared(), click: function() { $root.setupCheckLevel(0); $root.stepOnePrepared(1) }">{{ _('Prepare') }}</button><br><br>
<p style="">
    Once the printer has stopped moving, use your hand to slide the extruder towards the build surface. If the nozzle hits the glass, do not force the extruder any further. 
</p>
<p >
    <span style="text-align:left;font-size:20px;" >Which of the following options best describes your current extruder starting height? Click the photos to zoom in.</span>
</p>
</center>
<table>
    <tr>
        <td style="width:33%;padding:10px;border:2px solid #ddd;">
<a href="/plugin/mgsetup/static/img/6.jpg" data-lightbox="step2"><img data-bind="attr: {'src': '/plugin/mgsetup/static/img/6.jpg', 'width': '100%',} , visible: loginState.isUser && setupStep()==='1'" /></a>
        <button style="min-height:80px;width:100%;" id="control-yinc" class="btngo" data-bind="enable: isOperational() && !isPrinting() && loginState.isUser() && stepOnePrepared(), click: function() { $root.goTo('2'); window.scroll(0,0) }">{{ _('The nozzle hits the bed <br />') }}</button>
        </td>
        <td style="width:33%;padding:10px;border:2px solid #ddd;">
<a href="/plugin/mgsetup/static/img/4.jpg" data-lightbox="step2"><img data-bind="attr: {'src': '/plugin/mgsetup/static/img/4.jpg', 'width': '100%',} , visible: loginState.isUser && setupStep()==='1'" /></a>
        <button style="min-height:80px;width:100%;" id="control-yinc" class="btngo" data-bind="enable: isOperational() && !isPrinting() && loginState.isUser() && stepOnePrepared(), click: function() { $root.goTo('3'); window.scroll(0,0) }">{{ _('The nozzle clears the bed with a small gap(.5mm or less)') }}</button>
        </td>
        <td style="width:33%;padding:10px;border:2px solid #ddd;">
 <a href="/plugin/mgsetup/static/img/5.jpg" data-lightbox="step2"><img data-bind="attr: {'src': '/plugin/mgsetup/static/img/5.jpg', 'width': '100%',} , visible: loginState.isUser && setupStep()==='1'" /></a>
        <button style="min-height:80px;width:100%;" id="control-yinc" class="btngo" data-bind="enable: isOperational() && !isPrinting() && loginState.isUser() && stepOnePrepared(), click: function() { $root.goTo('2'); window.scroll(0,0) }">{{ _('The nozzle clears the bed with a large gap (more than .5mm)') }}</button>
        </td>
    </tr>
</table>
</div>

{#     ad888888b,    #}
{#    d8"     "88    #}
{#            a8P    #}
{#         ,d8P"     #}
{#       a8P"        #}
{#     a8P'          #}
{#    d8"            #}
{#    88888888888    #}
{# Adjust Starting Height #}

<div id="control-jog-custom" style="clear: both; display: none;" data-bind="visible: loginState.isUser  && setupStep()==='2'">
<div class="fileupload-new thumbnail" style="width: 95%; " data-bind="visible: $root.isDual">
        <img data-bind="attr: {'src': '/plugin/mgsetup/static/img/extruder0.jpg', 'width': '100%',} , visible: loginState.isUser && setupStep()==='2'" />
    </div><br>
<h1>Adjust Starting Height </h1>

Here we will adjust the initial starting height of the printer.  Click <strong>Prepare</strong> to move the printer to its testing position.<br><br>

<center><button id="control-yinc" class="btnstay" data-bind="enable: isOperational() && !isPrinting() && loginState.isUser() && !$root.stepTwoPrepared(), click: function() { $root.setupSetStartingHeight(0) ; $root.stepTwoPrepared(1) }">{{ _('Prepare') }}</button></center><br>
During this step you'll use the <strong>Bed Height Buttons</strong> below to adjust the distance between the nozzle and the glass.

<p>
    First, press the "1mm Up" button as you are watching the bed. You will see the bed move 1mm towards the nozzle. You will need to slowly repeat this process until the glass is within 1mm of the nozzle. Be careful not to hit the nozzle with the build platform!
</p>

<p>
    Now you can put the blue feeler gauge between the nozzle and the glass. Use the ".1mm up button" to bring the glass even close to the nozzle. As soon as you feel the feeler gauge get stuck, use the ".1mm down button" to move the bed back down (the feeler gauge should move freely)
</p>

<p>
    Next, use the ".01 up button" to move the bed up until you until you start to feel resistance while sliding the feeler gauge between the glass and nozzle. 
</p>

<div class="fileupload-new thumbnail" style="width: 95%; ">
        <img data-bind="attr: {'src': '/plugin/mgsetup/static/img/13.jpg', 'width': '100%',} , visible: loginState.isUser && setupStep()==='2'" /><center>
        </center>
    </div><br>
    <div data-bind="visible: !$root.hideDebug()"><br>Original Z Offset : <span data-bind="text: $root.ZOffset"></span><br></div>
Current Z Position : <span data-bind="text: $root.ZPos"></span>
<div data-bind="visible: !$root.hideDebug()"><br>Fresh data : <span data-bind="text: $root.ZPosFresh"></span></div><br>

<!-- Z jogging control panel -->


<h4>Bed Height Buttons</h4>
    <div id="control-jog-z" class="jog-panel" style="float:left; margin:0; width:33%;">
        <h1>Z 1mm</h1>
        <div>
            <button id="control-zinc" class="btn box" data-bind="enable: isOperational() && !isPrinting() && loginState.isUser() && $root.stepTwoPrepared() && $root.ZPos() > 1, click: function() { $root.sendJogCommand('z',-1,1) }"><i class="icon-arrow-up"></i></button> 1mm Up
        </div>
        <div>
            <button id="control-zdec" class="btn box" data-bind="enable: isOperational() && !isPrinting() && loginState.isUser() && $root.stepTwoPrepared() && $root.ZPos() > 1, click: function() { $root.sendJogCommand('z',1,1) }"><i class="icon-arrow-down"></i></button>1mm down
        </div>
    </div>
    <div id="control-jog-z" class="jog-panel" style="float:left; margin:0; width:33%;">
        <h1>Z 0.1mm</h1>
        <div>
            <button id="control-zinc" class="btn box" data-bind="enable: isOperational() && !isPrinting() && loginState.isUser() && $root.stepTwoPrepared(), click: function() { $root.sendJogCommand('z',-1,0.1) }"><i class="icon-arrow-up"></i></button> .1mm Up
        </div>
        <div>
            <button id="control-zdec" class="btn box" data-bind="enable: isOperational() && !isPrinting() && loginState.isUser() && $root.stepTwoPrepared(), click: function() { $root.sendJogCommand('z',1,0.1) }"><i class="icon-arrow-down"></i></button>.1mm Down
        </div>
    </div>
    <div id="control-jog-z" class="jog-panel" style="float:left; margin:0; width:33%;">
        <h1>Z 0.01mm</h1>
        <div>
            <button id="control-zinc" class="btn box" data-bind="enable: isOperational() && !isPrinting() && loginState.isUser() && $root.stepTwoPrepared(), click: function() { $root.sendJogCommand('z',-1,0.01) }"><i class="icon-arrow-up"></i></button>.01mm Up
        </div>
        <div>
            <button id="control-zdec" class="btn box" data-bind="enable: isOperational() && !isPrinting() && loginState.isUser() && $root.stepTwoPrepared(), click: function() { $root.sendJogCommand('z',1,0.01) }"><i class="icon-arrow-down"></i></button>.01mm Down
        </div>
    </div>




<br><br><br><br><br> <br><br><br>  <br>    

<center><button id="control-yinc" class="btnstayBig" data-bind="enable: isOperational() && !isPrinting() && loginState.isUser() && $root.stepTwoPrepared() && !$root.stepTwoStartingHeightSaved(), 
click: function() { $root.setupSetStartingHeight(1); $root.stepTwoStartingHeightSaved(true) }">{{ _('Save New Starting Height') }}</button></center>
<br><br>

<center><button class="btngoBig" data-bind="enable: $root.stepTwoPrepared && $root.stepTwoStartingHeightSaved(), click: function() { $root.goTo('3'); window.scroll(0,0) }">Next Step</button></center>

<br><br></div>


{#     ad888888b,    #}
{#    d8"     "88    #}
{#            a8P    #}
{#         aad8"     #}
{#         ""Y8,     #}
{#            "8b    #}
{#    Y8,     a88    #}
{#     "Y888888P'    #}
{# Filament Loading #}

<div id="eleven" data-bind="visible: loginState.isUser && setupStep()==='3'">
<h1 style="text-align:left">Extrude Filament</h1>


<p>
    Now you need to load filament into your printer. 
    When you click "Prepare" the printer will perform the following actions:
</p>

<ol>
    <li>Move the heated build platform down to its home position
    <li>Move the X and Y axes to their home positions
    <li>Start heating the printer's hot end
    <li>Start heating the printer's heated build platform.
</ol>

<p>
    Click 'Prepare' and then continue reading the instructions while you wait for your printer to heat up.
</p>

<p>

    <i class="icon-fire" style="float:left;font-size:30px;color:red;margin-right:5px;"></i>

    Your extruder will begin to get very hot.  Your build surface will also start to heat up.  (You'll need your build surface to be heated for the next step and it can take a few minutes for it to heat up).  Do not touch the extruder's nozzle or the build surface.
</p>


<center><button  id="control-yinc" class="btnstay" data-bind="enable: isOperational() && !isPrinting() && loginState.isUser() && !$root.stepThreeStartHeatingClicked(), click: function() { $root.sendWigglePreheat(); $root.stepThreeStartHeatingClicked(true) }">{{ _('Prepare') }}</button></center><br><br>

Now we’ll prepare to load filament, if you have not already, while waiting for your M3 to heat up.
<br><br>


Place the PLA filament spool on the spool holder so that the loose end points up toward the filament guide.  Cut the end of the filament so that the tip is flat.

<br /><br />


Feed the tip of your filament up through the black filament guide and the clear filament guide tube.

<video controls id="filamentVideo1" class="video-js"  preload="none"  data-setup='{"fluid": true, "controls":true}' data-bind="attr: { autoplay: 'true', loop: 'true' , poster:'/plugin/mgsetup/static/img/filamentLoad1Poster.jpg'}, if:  setupStep() === '3'" onclick="this.paused ? this.play() : this.pause();" vjs-big-play-centered>
    <source src="/plugin/mgsetup/video/filamentLoad1.mp4" type='video/mp4'>
    <p class="vjs-no-js">
      To view this video please enable JavaScript, and consider upgrading to a web browser that
      <a href="http://videojs.com/html5-video-support/" target="_blank">supports HTML5 video</a>
    </p>
</video>

<br /><br />



 Next insert the filament into the hole on top of the extruder. 

<video controls id="filamentVideo2" class="video-js"  preload="none"  data-setup='{"fluid": true}' data-bind="attr: { autoplay: 'true', loop: 'true' , poster:'/plugin/mgsetup/static/img/filamentLoad2Poster.jpg'}, if:  setupStep() === '3'" onclick="this.paused ? this.play() : this.pause();">
    <source src="/plugin/mgsetup/video/filamentLoad2.mp4" type='video/mp4'>
    <p class="vjs-no-js">
      To view this video please enable JavaScript, and consider upgrading to a web browser that
      <a href="http://videojs.com/html5-video-support/" target="_blank">supports HTML5 video</a>
    </p>
</video>
<br /><br />

Below you can see your extruder temperature. Once the extruder temperature matches the target temperature within 2 degrees,  click "Feed Filament" to start loading filament. You may need to apply slight downward pressure on the filament to get started. Once the filament has started to feed you should feel it being pulled into the extruder. 

<p style="text-align:center; font-size:25px;line-height:25px;">
    <!--Bed Temperature: <span data-bind="text: $root.displayBedTemp(), style: { color: (parseFloat($root.displayBedTemp()) < 40) ? 'green' : 'red' }"></span> / <span data-bind="text: $root.displayBedTempTarget()"></span><br>-->
    Extruder Temperature: <span data-bind="text: $root.displayToolTemp(),  style: { color: (parseFloat($root.displayToolTemp()) < 50) ? 'green' : 'red' }"></span> /  Target Temperature: <span data-bind="text: $root.displayToolTempTarget()"></span><br>
</p>

<br>
<center><button title="Extrude 75mm of Filament" class="btnstay" data-bind="enable: $root.stepThreeStartHeatingClicked() && $root.lockButton(), click: function() { $root.feedFilament(); $root.enableLockedButton() }, enabled: (parseFloat($root.displayToolTemp()) > 180) ">Feed Filament</button></center>
<br>
Continue clicking "Feed Filament" until a thin strand of filament is consistently extruding from the tip of the nozzle. Use your tweezers to remove the hot filament after it has been extruded. <br><br>

Push the filament guide tube down into the plastic extruder hole. 

<video controls id="filamentVideo3" class="video-js" preload="none"   data-setup='{"fluid": true}' data-bind="attr: { autoplay: 'true', loop: 'true' , poster:'/plugin/mgsetup/static/img/filamentLoad3Poster.jpg'}, if:  setupStep() === '3'" onclick="this.paused ? this.play() : this.pause();">
    <source src="/plugin/mgsetup/video/filamentLoad3.mp4" type='video/mp4'>
    <p class="vjs-no-js">
      To view this video please enable JavaScript, and consider upgrading to a web browser that
      <a href="http://videojs.com/html5-video-support/" target="_blank">supports HTML5 video</a>
    </p>
</video>

Once filament is consistently extruding, click to proceed:<br>
<center><button class="btngoBig" data-bind="visible: loginState.isUser, click: function() { $root.goTo('4'); window.scroll(0,0) }">Next Step</button></center>
</div>


{#            ,d8    #}
{#          ,d888    #}
{#        ,d8" 88    #}
{#      ,d8"   88    #}
{#    ,d8"     88    #}
{#    8888888888888  #}
{#             88    #}
{#             88    #}
{# Verify Starting Height (Wiggle) #}

<div id="wiggle-section" class="jog-panel" style="display:none;" data-bind="visible: loginState.isUser && setupStep()==='4'">

<h1 style="text-align:left">Verify Starting Height</h1>





<p>
   
    <i class="icon-fire" style="float:left;font-size:30px;color:red;margin-right:5px;"></i> The printer's extruder and build platform are hot - do not touch them!
</p>

<p>
    In this step you will print a small pattern on the build platform. We'll call this pattern a <em>Zigzag pattern</em> in the future. The Zigzag pattern will help you to verify your starting height. 
</p>

<em>Zigzag pattern Picture</em>

<p>
    When you click "Print First Zigzag Pattern" the printer will perform the following actions
</p>

<ol>
    <li>Wait for the Extruder and build platform to reach their target temperatures. (The printer will not move while it waits. You can see the actual temperatures in red and the target temperatures in black below the "Print First Zigzag Pattern" button)
    <li>Move to its home position
    <li>Move to its printing position
    <li>Print a small amount of material off the side of the bed
    <li>Print a Zigzag pattern in the middle of the bed
    <li>Move to its final position
</ol>


<p>
    When you are ready, click "Print First Zigzag Pattern"
</p>
<br>

<center><button class="btnstay" data-bind="enable: !$root.stepFourFirstWiggleClicked(), click: function() { $root.printWiggle(1); $root.stepFourFirstWiggleClicked(true); $root.enableLockedButton(8000) }">Print First Zigzag Pattern</button></center><br>



<p style="text-align:center; font-size:25px;line-height:25px;">
    Bed Temperature: <span data-bind="text: $root.displayBedTemp(), style: { color: (parseFloat($root.displayBedTemp()) < 40) ? 'green' : 'red' }"></span> / <span data-bind="text: $root.displayBedTempTarget()"></span><br>
    Extruder Temperature: <span data-bind="text: $root.displayToolTemp(),  style: { color: (parseFloat($root.displayToolTemp()) < 50) ? 'green' : 'red' }"></span> / <span data-bind="text: $root.displayToolTempTarget()"></span><br>
</p>

Once the Zigzag pattern has printed, and the printer has fully parked, you can use your tweezers to remove any material on the side of the bed. Next, carefully remove the Zigzag pattern by using your tweezers to lift it off the bed from the rear left "tail".  How the Zigzag pattern comes off the bed tells us if the bed is level at this position:<br><br>


   
   <video controls id="filamentVideo1" class="video-js"  preload="none"     data-setup='{"fluid": true}' data-bind="attr: { autoplay: 'true', loop: 'true' , poster:'/plugin/mgsetup/static/img/wiggleposter.jpg'}, if:  setupStep() === '4'" onclick="this.paused ? this.play() : this.pause();">
    <source src="/plugin/mgsetup/video/wiggleMiddle.mp4" type='video/mp4'>
    <p class="vjs-no-js">
      To view this video please enable JavaScript, and consider upgrading to a web browser that
      <a href="http://videojs.com/html5-video-support/" target="_blank">supports HTML5 video</a>
    </p>
    </video>




<p >
    <strong style="font-size:20px;" >Which of the following options best describes your Zigzag pattern? Click the photos to zoom in.</strong>
</p>



<table>
    <tr>
        <td style="width:33%;padding:10px;border-bottom:0px;border-top:0px;border-left:2px; border-right:2px;border:solid #ddd;">
            <a href="/plugin/mgsetup/static/img/10.jpg" data-lightbox="step8"> <img data-bind="attr: {'src': '/plugin/mgsetup/static/img/10.jpg', 'width': '100%',} , visible: loginState.isUser && setupStep()==='4'" /></a>
 
        </td>

        <td style="width:33%;padding:10px;border-bottom:0px;border-top:0px;border-left:2px; border-right:2px;border:solid #ddd;">

            <a href="/plugin/mgsetup/static/img/11.jpg" data-lightbox="step8"><img data-bind="attr: {'src': '/plugin/mgsetup/static/img/11.jpg', 'width': '100%',} , visible: loginState.isUser && setupStep()==='4'" /></a>
 
        </td>
 



        <td style="width:33%;padding:10px;border-bottom:0px;border-top:0px;border-left:2px; border-right:2px;border:solid #ddd;">

             <a href="/plugin/mgsetup/static/img/12.jpg" data-lightbox="step8"> <img data-bind="attr: {'src': '/plugin/mgsetup/static/img/12.jpg', 'width': '100%',} , visible: loginState.isUser && setupStep()==='4'" /></a>
         </td>
 
    </tr>




    <tr>

        <td style="border-left:2px;border-right:2px;border-bottom:0px;border-top:0px;border:solid #ddd;">
            If the  Zigzag pattern peels off with fifty percent of the zigzag pattern as loose segments and fifty percent as connected segments, you have <strong>a perfect Starting Height</strong>. Click below to proceed to the next step. 
            <br />




            <br />

            <strong>NOTE:</strong> If the last few segments break off from the rest of the strand, don't worry - just use your tweezers to pull them off the bed. 


             
        </td>

        <td style="border-left:2px;border-right:2px;border-bottom:0px;border-top:0px;border:solid #ddd;">
                If the Zigzag pattern peels-off as an even strand made with no small section of connected segments at the end, <strong>the Starting Height is too low</strong>. Click below to adjust the starting height and print a new zigzag. 
           <!-- <br />
            <br />

            <strong>NOTE:</strong> If the last few segments break off from the rest of the strand, don't worry - just use your tweezers to pull them off the bed. -->

        </td>
        <td style="border-left:2px;border-right:2px;border-bottom:0px;border-top:0px;border:solid #ddd;">
     
            If the Zigzag pattern peels-off in one solid piece, with most/all segments of the zig-zag pattern connected, 
             <strong>the Starting Height is too high</strong>. Click below to adjust the starting height and print a new zigzag. 



        </td>
    </tr>

    <tr>

        <td style="border-bottom:0px;border-top:0px;border-left:2px; border-right:2px;border:solid #ddd;min-height:40px;">
            
            <center><button style="width:100%;" class="btngoBig" data-bind="enable: $root.stepFourFirstWiggleClicked() && $root.lockButton(), click: function() { $root.setupSetStartingHeight('2'); window.scroll(0,0) }">Next Step<br /></button></center>

  <!--Too far-->
        </td>


        <td style="border-bottom:0px;border-top:0px;border-left:2px; border-right:2px;border:solid #ddd;min-height:40px;">
<div data-bind="visible: $root.stepFourShowFineAdjustments()==false"><br>
            <center><button class="btnstay" data-bind="visible: $root.stepFourShowFineAdjustments()==false, enable: $root.stepFourFirstWiggleClicked() && $root.lockButton(), click: function() { $root.printWiggle(10,-0.04); $root.enableLockedButton(10000) }">Adjust and Print</button></center></div>
            <center><button class="btnstay" data-bind="visible: $root.stepFourShowFineAdjustments()==true, enable: $root.stepFourFirstWiggleClicked() && $root.lockButton(), click: function() { $root.printWiggle(10,-0.04); $root.enableLockedButton(10000) }">Adjust by 0.04mm and Print</button></center><br>
            <center><button class="btnstay" data-bind="visible: $root.stepFourShowFineAdjustments()==true, enable: $root.stepFourFirstWiggleClicked() && $root.lockButton(), click: function() { $root.printWiggle(10,-0.02); $root.enableLockedButton(10000) }">Adjust by 0.02mm and Print</button></center><br>
            <center><button class="btnstay" data-bind="visible: $root.stepFourShowFineAdjustments()==true, enable: $root.stepFourFirstWiggleClicked() && $root.lockButton(), click: function() { $root.printWiggle(10,-0.01); $root.enableLockedButton(10000) }">Adjust by 0.01mm and Print</button></center>            

        </td>


        <td style="border-bottom:0px;border-top:0px;border-left:2px; border-right:2px;border:solid #ddd;min-height:40px;">
            <div data-bind="visible: $root.stepFourShowFineAdjustments()==false"><br>
            <center><button class="btnstay" data-bind="visible: $root.stepFourShowFineAdjustments()==false, enable: $root.stepFourFirstWiggleClicked() && $root.lockButton(), click: function() { $root.printWiggle(10,0.04); $root.enableLockedButton(10000) }">Adjust and Print</button></center></div>
            <center><button class="btnstay" data-bind="visible: $root.stepFourShowFineAdjustments()==true, enable: $root.stepFourFirstWiggleClicked() && $root.lockButton(), click: function() { $root.printWiggle(10,0.04); $root.enableLockedButton(10000) }">Adjust by 0.04mm and Print</button></center><br>
            <center><button class="btnstay" data-bind="visible: $root.stepFourShowFineAdjustments()==true, enable: $root.stepFourFirstWiggleClicked() && $root.lockButton(), click: function() { $root.printWiggle(10,0.02); $root.enableLockedButton(10000) }">Adjust by 0.02mm and Print</button></center><br>
            <center><button class="btnstay" data-bind="visible: $root.stepFourShowFineAdjustments()==true, enable: $root.stepFourFirstWiggleClicked() && $root.lockButton(), click: function() { $root.printWiggle(10,0.01); $root.enableLockedButton(10000) }">Adjust by 0.01mm and Print</button></center>  
            <!--Too Close-->
        </td>
    <tr>

</table>


<input type="checkbox" data-bind="checked: $root.stepFourShowFineAdjustments" /> Show the Fine Adjustment Buttons.


</div>

{#    8888888888   #}
{#    88           #}
{#    88  ____     #}
{#    88a8PPPP8b,  #}
{#    PP"     `8b  #}
{#             d8  #}
{#    Y8a     a8P  #}
{#     "Y88888P"   #}
{# Heated Corner Check (wiggles) #}
<div class="jog-panel" style="display: none;" data-bind="visible: loginState.isUser && setupStep()==='5'">
<center><h1 style="text-align:left;">Heated Corner Check</h1>
    <p>
        In this step you will check if your build surface is level by verifying the vertical alignment of all four corners of your build surface. 
    </p>
    <p>
        Click “Begin Corner Check” to print a Zigzag pattern on each corner of your build surface. 
    </p>
<button id="control-yinc" class="btnstay" data-bind="enable: isOperational() && !isPrinting() && loginState.isUser() && !$root.stepFiveBeginCornerCheckClicked(), click: function() { printWiggle('all'); $root.stepFiveBeginCornerCheckClicked(true) }">{{ _('Begin Corner Check') }}</button>
<br>
<br />
<p style="text-align:center; font-size:25px;line-height:25px;">
    Bed Temperature: <span data-bind="text: $root.displayBedTemp(), style: { color: (parseFloat($root.displayBedTemp()) < 40) ? 'green' : 'red' }"></span> / <span data-bind="text: $root.displayBedTempTarget()"></span><br>
    Extruder Temperature: <span data-bind="text: $root.displayToolTemp(),  style: { color: (parseFloat($root.displayToolTemp()) < 50) ? 'green' : 'red' }"></span> / <span data-bind="text: $root.displayToolTempTarget()"></span><br>
</p>
<p>
    After all four Zigzag patterns have printed, remove each one.
</p>
<hr />
<h1 style="">LOOK CAREFULLY </h1>
<p>
</p>
<p>
</p>
<p>
</p>
<p ></p>
<strong style="font-size:20px;" >Which of the following options best describes the results of your Corner Check? Click the photos to zoom in.</strong></center>
<table class="choiceTable">
    <tr>
        <td>
<a href="/plugin/mgsetup/static/img/10.jpg" data-lightbox="step3"><img data-bind="attr: {'src': '/plugin/mgsetup/static/img/10.jpg', 'width': '100%',} , visible: loginState.isUser && setupStep()==='5'" /></a>
        </td>
        <td>
<a href="/plugin/mgsetup/static/img/11.jpg" data-lightbox="step3"><img data-bind="attr: {'src': '/plugin/mgsetup/static/img/11.jpg', 'width': '100%',} , visible: loginState.isUser && setupStep()==='5'" /></a>
        </td>
        <td>
 <a href="/plugin/mgsetup/static/img/12.jpg" data-lightbox="step3"><img data-bind="attr: {'src': '/plugin/mgsetup/static/img/12.jpg', 'width': '100%',} , visible: loginState.isUser && setupStep()==='5'" /></a>
        </td>
    </tr>
    <tr>
        <td>
            <strong>A perfectly leveled corner</strong> will result in corner Zigzag pattern that peels with fifty percent of the zigzag pattern as loose segments and fifty percent as connected segments.
            <br />
            <br />
            <strong>NOTE:</strong> If the last few segments break off from the rest of the strand, don't worry - just use your tweezers to pull them off the bed. 
        </td>
        <td>
             <strong>A corner is too low</strong> if a corner Zigzag pattern peels-off an even strand made entirely of zig zags, with no small section of connected segments at the end.
        </td>
        <td>
            <strong>A corner is too high</strong> is the Zigzag pattern peels-off in one solid piece, with most/all segments of the zig-zag pattern connected.
         
        </td>
    </tr>
    <tr>
        <td class="buttonCell">
             <center><button   style="min-height:50px;" id="control-yinc" class="btngo" data-bind="enable: isOperational() && !isPrinting() && loginState.isUser() && $root.stepFiveBeginCornerCheckClicked(), click: function() { $root.goTo('7'); window.scroll(0,0) }">{{ _('All four Zigzag patterns peeled off the bed correctly.') }}</button></center>
        </td>
        <td colspan="2" class="buttonCell">
            <center><button style="min-height:50px;" id="control-yinc" class="btngo" data-bind="enable: isOperational() && !isPrinting() && loginState.isUser() && $root.stepFiveBeginCornerCheckClicked(), click: function() { $root.goTo('6'); window.scroll(0,0) }">{{ _('One or more of the Zigzag patterns was not correct.') }}</button></center>
        </td>
    </tr>
</table>
</div>

{#      ad8888ba,    #}
{#     8P'    "Y8    #}
{#    d8             #}
{#    88,dd888bb,    #}
{#    88P'    `8b    #}
{#    88       d8    #}
{#    88a     a8P    #}
{#     "Y88888P"     #}
{# Heated Leveling (wiggles) #}

<div id="wiggle-section" class="jog-panel" style="display:none;" data-bind="visible: loginState.isUser && setupStep()==='6'">
<br>




<h1 style="text-align:left;"> Heated Build Platform Leveling</h1>


Here you will be able to print Zigzag patterns in each corner and then adjust the bed leveling screw in that corner until the Zigzag pattern is acceptable.  To begin, please click "Prepare" to Home the printer:
<center><button class="btnstay" data-bind="enable: !$root.stepSixPrepared(), click: function() { $root.setupSetStartingHeight('0') ; $root.stepSixPrepared(true) }">Prepare</button></center><br>



<p style="text-align:center; font-size:25px;line-height:25px;">
    Bed Temperature: <span data-bind="text: $root.displayBedTemp(), style: { color: (parseFloat($root.displayBedTemp()) < 40) ? 'green' : 'red' }"></span> / <span data-bind="text: $root.displayBedTempTarget()"></span><br>
    Extruder Temperature: <span data-bind="text: $root.displayToolTemp(),  style: { color: (parseFloat($root.displayToolTemp()) < 50) ? 'green' : 'red' }"></span> / <span data-bind="text: $root.displayToolTempTarget()"></span><br>
</p>


Once the printer has stopped moving, use the four Zigzag pattern Position buttons to print in each corner, starting with the corner that was most different from the others in the Four Zigzag pattern print.  After each print, inspect the Zigzag pattern and adjust the bed accordingly:<br><br>



If the entire Zigzag pattern was completely stuck to the bed, the bed leveling screw needs to be loosened by turning it counter-clockwise, to lower the bed at this position.<br><br>
   
   <video controls id="ccw" class="video-js"  preload="none"  data-setup='{ "fluid": true}'  data-bind="attr: {  autoplay: 'true', loop: 'true', poster:'/plugin/mgsetup/static/img/ccwposter.jpg' }, if:  setupStep() === '6'" onclick="this.paused ? this.play() : this.pause();">
    <source src="/plugin/mgsetup/video/ccw.mp4" type='video/mp4'>
    <p class="vjs-no-js">
      To view this video please enable JavaScript, and consider upgrading to a web browser that
      <a href="http://videojs.com/html5-video-support/" target="_blank">supports HTML5 video</a>
    </p>
    </video>



<hr />

If the entire Zigzag pattern was loose or not adhered to the bed at all, the bed leveling screw needs to be tightened by turning it clockwise, to raise the bed at this position.<br><br>


   <video controls id="cw" class="video-js"  preload="none"  data-setup='{"fluid": true}' data-bind="attr: { autoplay: 'true', loop: 'true', poster:'/plugin/mgsetup/static/img/cwposter.jpg'}, if:  setupStep() === '6'" onclick="this.paused ? this.play() : this.pause();" >
    <source src="/plugin/mgsetup/video/cw.mp4" type='video/mp4'>
    <p class="vjs-no-js">
      To view this video please enable JavaScript, and consider upgrading to a web browser that
      <a href="http://videojs.com/html5-video-support/" target="_blank">supports HTML5 video</a>
    </p>
    </video>

<hr />

A quarter-turn should be the largest adjustment made between tests.<br><br>
Note: All positions wait for the bed and hotend temperatures to stabilize before starting, so it may take a moment to begin printing.<br><br>


<center><div style="position:relative;height: 454px;width: 95%; background-image: url('/plugin/mgsetup/static/img/7corners.jpg'); background-repeat: no-repeat round; background-position: center;">
       
    <button class="btnstay bottomleft" data-bind="enable: $root.stepSixPrepared() && $root.lockButton() , click: function() {$root.printWiggle(20); $root.stepSixWigglePrinted(true); $root.enableLockedButton()} ">Zigzag 1</button>
    <button class="btnstay bottomright" data-bind="enable: $root.stepSixPrepared() && $root.lockButton(), click: function() {$root.printWiggle(3); $root.stepSixWigglePrinted(true); $root.enableLockedButton()} ">Zigzag 2</button>
    <button class="btnstay topright" data-bind="enable: $root.stepSixPrepared() && $root.lockButton(), click: function() {$root.printWiggle(4); $root.stepSixWigglePrinted(true); $root.enableLockedButton()} ">Zigzag 3</button>
    <button class="btnstay topleft" data-bind="enable: $root.stepSixPrepared() && $root.lockButton(), click: function() {$root.printWiggle(5); $root.stepSixWigglePrinted(true); $root.enableLockedButton()} ">Zigzag 4</button>


    </div></center>
<br><br><br>

<center>



<img src="/plugin/mgsetup/static/img/10.jpg">
<p>A perfectly leveled corner will result in corner Zigzag pattern that peels with fifty percent of the zigzag pattern as loose segments and fifty percent as connected segments. If your zigzag is close to this, your corner is set and needs no further adjustment. When all 4 patterens are correct, you can proceed.
</p>



<button class="btngo" data-bind="enable: $root.stepSixWigglePrinted(), click: function() { $root.goTo('7'); window.scroll(0,0) }">Next Step</button>
</center>
</div>


{#    888888888888  #}
{#            ,8P'  #}
{#           d8"    #}
{#         ,8P'     #}
{#        d8"       #}
{#      ,8P'        #}
{#     d8"          #}
{#    8P'           #}
{# Done #}

<div class="jog-panel" style="display: none;" data-bind="visible: loginState.isUser && setupStep()==='7'">
<span data-bind="visible: !$root.isDual()"><h1 style="text-align:left;">Quick Check Complete</h1></span>
<span data-bind="visible: $root.isDual()"><h1 style="text-align:left;">Left Extruder Check Complete</h1></span>
<span data-bind="visible: !$root.isDual()">Congratulations, your M3 is ready to start printing!
    Note that your printer is still hot from testing; if you are done with your printer, click below to turn off heaters. If you're ready to get started printing, you can leave the heaters on.</span><br>
    <center>
        <button class="btnstay" data-bind="enable: loginState.isUser(), click: function() {$root.cooldown()}">Cooldown</button>
    </center>


    <h1 style="text-align:left;">Your First Print</h1>
    <!--
    <p>
        <em>How to print Video</em>
    </p>
-->

    <p> 
        In the left <strong>Files</strong> menu, you'll see the file <strong>mgkeychain.stl</strong>. This is a 3D model of a small MakerGear keychain. Before you can print it, you need to generate a GCode version of the file. This GCode file will instruct the printer how to make the 3D Model. To generate the GCode, click on the <span class="icon-magic"></span> icon. You will see the the slicing dialog - hit <strong>Slice</strong> to start generating your Gcode. (You can leave all the settings at their default values.)
        <img src="/plugin/mgsetup/static/img/stl.png" style="display:block;width::50%;margin-left:auto;margin-right:auto">
            <br/>
        <img src="/plugin/mgsetup/static/img/slice.png" style="display:block;width::50%;margin-left:auto;margin-right:auto">

    </p>


    <p>
        You will see a progress bar, and once the GCode has been generated, you should see 'mgkeychain.gco' with several buttons below it. Press the <span class="icon-print"></span> icon to start your first print.
    </p>
    <img src="/plugin/mgsetup/static/img/gcode.png" style="display:block;width::50%;margin-left:auto;margin-right:auto">


    <p>
        Your printer will make sure that the extruder/bed are heated correctly, and then start to print the keychain.  You can monitor your progress from the 'State' bar on the left, or from the 'Gcode Viewer' Tab. 
    </p>

    <p>
        Learn how to get the most out of your M3 by visiting the  <a href="https://makergear.zendesk.com/hc/en-us/categories/115000563646-M3" target="_blank">M3 Knowledge Base</a>.

    </p>


    <!--
    <p>
    
        <em>Explanation of STL, Slicing and Gcode</em>
    </p>


    <p>
    
        <em>Videos / Links to using OctoPrint</em>
    </p>
    -->
    <h1 style="text-align:left;">Configuration for Further Use</h1>

    Now that your initial setup is complete, you can change the first tab that is shown when you connect to the Temperature tab for immediate access.  This can be changed in the Settings: <a href="#settings_plugin_mgsetup" data-bind="click: function() { $root.showSettings('settings_plugin_mgsetup'); }">click here to go to the MakerGear Setup settings "tab"</a>.<br><br><br>

    <div data-bind="visible: $root.isDual">
    <h1 style="text-align:left;">Dual Extruder Setup</h1>
    To continue on to the Dual Extruder configuration, click "Next":<br>
<center><button class="btngoBig" data-bind="enable: loginState.isUser(), click: function() { $root.goTo('8'); window.scroll(0,0) }">Next</button></center>
</div>
</div>

<!-- Container for custom controls -->

{#                                              
    88888888ba,                             88  
    88      `"8b                            88  
    88        `8b                           88  
    88         88  88       88  ,adPPYYba,  88  
    88         88  88       88  ""     `Y8  88  
    88         8P  88       88  ,adPPPPP88  88  
    88      .a8P   "8a,   ,a88  88,    ,88  88  
    88888888Y"'     `"YbbdP'Y8  `"8bbdP"Y8  88  
                                                
                                              #}


{#   ad88888ba   
    d8"     "8b  
    Y8a     a8P  
     "Y8aaa8P"   
     ,d8"""8b,   
    d8"     "8b  
    Y8a     a8P  
     "Y88888P"   #}
{# Cold Starting Height Check - EXT1 #}


<div class="jog-panel" style="display: none;" data-bind="visible: loginState.isUser && setupStep()==='8'">
<div class="fileupload-new thumbnail" style="width: 95%; " data-bind="visible: $root.isDual">
        <img data-bind="attr: {'src': '/plugin/mgsetup/static/img/extruder1.jpg', 'width': '100%',} , visible: loginState.isUser && setupStep()==='8'" />
</div><br>
<h1 style="text-align:left;">Extruder 1 Starting Height Check</h1>
<p style="text-align:left;">
First you need to ensure that your factory settings are correct for Extruder 1 as well. Click <strong>Prepare</strong> to move the printer to its testing position.<br><br>
</p>
<center>
<button id="control-yinc" class="btnstay" data-bind="enable: isOperational() && !isPrinting() && loginState.isUser() && !$root.stepEightPrepared(), click: function() { $root.dualSetupCheckLevel(0); $root.stepEightPrepared(true) }">{{ _('Prepare') }}</button><br><br>
<p style="">
    Once the printer has stopped moving, use your hand to slide both extruders towards the build surface. If the nozzle of Extruder 1 hits the glass, do not force the extruder any further. 
</p>
<p >
    <span style="text-align:left;font-size:20px;" >Which of the following options best describes your current Extruder 1 starting height? Click the photos to zoom in.</span>
</p>
</center>
TODO: Replace these with pictures showing both extruders, focusing on EXT1. TODO!
<table>
    <tr>
        <td style="width:33%;padding:10px;border:2px solid #ddd;">
<a href="/plugin/mgsetup/static/img/6.jpg" data-lightbox="step8"><img data-bind="attr: {'src': '/plugin/mgsetup/static/img/6.jpg', 'width': '100%',} , visible: loginState.isUser && setupStep()==='8'" /></a>
        <button style="min-height:80px;width:100%;" id="control-yinc" class="btngo" data-bind="enable: isOperational() && !isPrinting() && loginState.isUser() && stepEightPrepared(), click: function() { $root.goTo('9'); $root.extOneNeedsPhysical(true); window.scroll(0,0) }">{{ _('The nozzle hits the bed <br />') }}</button>
        </td>
        <td style="width:33%;padding:10px;border:2px solid #ddd;">
<a href="/plugin/mgsetup/static/img/4.jpg" data-lightbox="step8"><img data-bind="attr: {'src': '/plugin/mgsetup/static/img/4.jpg', 'width': '100%',} , visible: loginState.isUser && setupStep()==='8'" /></a>
        <button style="min-height:80px;width:100%;" id="control-yinc" class="btngo" data-bind="enable: isOperational() && !isPrinting() && loginState.isUser() && stepEightPrepared(), click: function() { $root.goTo('10'); $root.extOneNeedsPhysical(false); window.scroll(0,0) }">{{ _('The nozzle clears the bed with a small gap(.5mm or less)') }}</button>
        </td>
        <td style="width:33%;padding:10px;border:2px solid #ddd;">
 <a href="/plugin/mgsetup/static/img/5.jpg" data-lightbox="step8"><img data-bind="attr: {'src': '/plugin/mgsetup/static/img/5.jpg', 'width': '100%',} , visible: loginState.isUser && setupStep()==='8'" /></a>
        <button style="min-height:80px;width:100%;" id="control-yinc" class="btngo" data-bind="enable: isOperational() && !isPrinting() && loginState.isUser() && stepEightPrepared(), click: function() { $root.goTo('9'); $root.extOneNeedsPhysical(true); window.scroll(0,0) }">{{ _('The nozzle clears the bed with a large gap (more than .5mm)') }}</button>
        </td>
    </tr>
</table>
</div>


{#   ad88888ba   
    d8"     "88  
    8P       88  
    Y8,    ,d88  
     "PPPPPP"88  
             8P  
    8b,    a8P   
    `"Y8888P'    #}

{# Physical T1 Height Adjustment - By Hand #}

<div class="jog-panel" style="display: none;" data-bind="visible: loginState.isUser && setupStep()==='9'">

In this step, we will physically adjust the height of Extruder 1 in the mounting plate.  The system is already calibrated for Extruder 0's height, so we will adjust Extruder 1 to match that as closely as possible.
<br><br>

<strong>Before proceeding, clean the tips of both nozzles to ensure proper height adjustment.</strong><br><br>

    Bed Temperature: <span data-bind="text: $root.displayBedTemp(), style: { color: (parseFloat($root.displayBedTemp()) < 40) ? 'green' : 'red' }"></span> / <span data-bind="text: $root.displayBedTempTarget()"></span><br>
    Extruder 0 Temperature: <span data-bind="text: $root.displayToolTemp(),  style: { color: (parseFloat($root.displayToolTemp()) < 50) ? 'green' : 'red' }"></span> / <span data-bind="text: $root.displayToolTempTarget()"></span><br>
    Extruder 1 Temperature: <span data-bind="text: $root.displayTool1Temp(),  style: { color: (parseFloat($root.displayToolTemp()) < 50) ? 'green' : 'red' }"></span> / <span data-bind="text: $root.displayTool1TempTarget()"></span><br><br>

Once Extruder 1 is below 50°C, loosen the clamping bolt [TODO: PICTURES] securing the Extruder 1 hotend, push it up into the mounting plate as far as possible, and then loosely secure the clamping bolt.<br><br>
<center><button style="width:100%;" class="btngoBig" data-bind="enable: loginState.isUser && !$root.stepNineAtPosition(), click: function() { $root.dualRightNozzleAdjust(1), $root.stepNineAtPosition(true) }">Move to Position<br /></button></center><br><br>
During this step you'll use the <strong>Bed Height Buttons</strong> below to adjust the distance between the left nozzle (Extruder 0) and the glass.

<p>
    First, press the "1mm Up" button as you are watching the bed. You will see the bed move 1mm towards the nozzle. You will need to slowly repeat this process until the glass is within 1mm of the nozzle. Be careful not to hit the nozzle with the build platform!
</p>

<p>
    Now you can put the blue feeler gauge between the nozzle and the glass. Use the ".1mm up button" to bring the glass even close to the nozzle. As soon as you feel the feeler gauge get stuck, use the ".1mm down button" to move the bed back down (the feeler gauge should move freely)
</p>

<p>
    Next, use the ".01 up button" to move the bed up until you until you start to feel resistance while sliding the feeler gauge between the glass and nozzle. 
</p>
<h4>Bed Height Buttons</h4>
    <div id="control-jog-z" class="jog-panel" style="float:left; margin:0; width:33%;">
        <h1>Z 1mm</h1>
        <div>
            <button id="control-zinc" class="btn box" data-bind="enable: isOperational() && !isPrinting() && loginState.isUser()&& $root.ZPos() > 1 && $root.stepNineAtPosition(), click: function() { $root.sendJogCommand('z',-1,1) }"><i class="icon-arrow-up"></i></button>1mm Up
        </div>
        <div>
            <button id="control-zdec" class="btn box" data-bind="enable: isOperational() && !isPrinting() && loginState.isUser() && $root.ZPos() > 1 && $root.stepNineAtPosition(), click: function() { $root.sendJogCommand('z',1,1) }"><i class="icon-arrow-down"></i></button>1mm down
        </div>
    </div>
    <div id="control-jog-z" class="jog-panel" style="float:left; margin:0; width:33%;">
        <h1>Z 0.1mm</h1>
        <div>
            <button id="control-zinc" class="btn box" data-bind="enable: isOperational() && !isPrinting() && loginState.isUser() && $root.stepNineAtPosition(), click: function() { $root.sendJogCommand('z',-1,0.1) }"><i class="icon-arrow-up"></i></button> .1mm Up
        </div>
        <div>
            <button id="control-zdec" class="btn box" data-bind="enable: isOperational() && !isPrinting() && loginState.isUser() && $root.stepNineAtPosition(), click: function() { $root.sendJogCommand('z',1,0.1) }"><i class="icon-arrow-down"></i></button>.1mm Down
        </div>
    </div>
    <div id="control-jog-z" class="jog-panel" style="float:left; margin:0; width:33%;">
        <h1>Z 0.01mm</h1>
        <div>
            <button id="control-zinc" class="btn box" data-bind="enable: isOperational() && !isPrinting() && loginState.isUser() && $root.stepNineAtPosition(), click: function() { $root.sendJogCommand('z',-1,0.01) }"><i class="icon-arrow-up"></i></button>.01mm Up
        </div>
        <div>
            <button id="control-zdec" class="btn box" data-bind="enable: isOperational() && !isPrinting() && loginState.isUser() && $root.stepNineAtPosition(), click: function() { $root.sendJogCommand('z',1,0.01) }"><i class="icon-arrow-down"></i></button>.01mm Down
        </div>
    </div>
<br><br>
Once the feeler gauge catches between the nozzle and bed, click "Switch Extruders" to start adjusting the Extruder 1 height:
<br><center><button style="width:100%;" class="btngoBig" data-bind="enable: loginState.isUser && $root.stepNineAtPosition() && !$root.stepNineExtrudersSwitched(), click: function() { $root.dualRightNozzleAdjust(2), $root.stepNineExtrudersSwitched(true) }">Switch Extruders<br /></button></center><br><br>

Now move the feeler gauge under the tip of the nozzle. Loosen the T1 clamping bolt until the T1 hotend can move freely, and let it drop to the bed. Secure the T1 clamping bolt.<br>
<strong><center>Tighten the clamping bolt completely - this is a safety hazard if not secured.</center></strong>
<br><br><center><button style="width:100%;" class="btngoBig" data-bind="enable: loginState.isUser && $root.stepNineAtPosition() && $root.stepNineExtrudersSwitched(), click: function() { $root.dualRightNozzleAdjust(3) }">Extruder 1 is touching feeler gauge<br /></button></center>
</div>

{#      88     ,a8888a,     
      ,d88   ,8P"'  `"Y8,   
    888888  ,8P        Y8,  
        88  88          88  
        88  88          88  
        88  `8b        d8'  
        88   `8ba,  ,ad8'   
        88     "Y8888P"     #}

{# Load Filament - EXT1 #}

<div id="nine" data-bind="visible: loginState.isUser && setupStep()==='10'">
<h1 style="text-align:left">Extrude Filament on Extruder 1</h1>


<p>
    Now you need to load filament into your printer. 
    When you click "Prepare" the printer will perform the following actions:
</p>

<ol>
    <li>Move the heated build platform down to its home position
    <li>Move the X and Y axes to their home positions
    <li>Start heating the printer's hot end
    <li>Start heating the printer's heated build platform.
</ol>

<p>
    Click 'Prepare' and then continue reading the instructions while you wait for your printer to heat up.
</p>

<p>

    <i class="icon-fire" style="float:left;font-size:30px;color:red;margin-right:5px;"></i>

    Your right extruder will begin to get very hot.  Your build surface will also start to heat up.  (You'll need your build surface to be heated for the next step and it can take a few minutes for it to heat up).  Do not touch the right extruder's nozzle or the build surface.
</p>


<center><button  id="control-yinc" class="btnstay" data-bind="enable: isOperational() && !isPrinting() && loginState.isUser() && !$root.stepTenStartHeatingClicked(), click: function() { $root.sendWigglePreheat('T1'); $root.stepTenStartHeatingClicked(true) }">{{ _('Prepare') }}</button></center><br><br>

Now we’ll prepare to load filament, if you have not already, while waiting for your M3 to heat up.
<br><br>


Place the PLA filament spool on the spool holder so that the loose end points up toward the filament guide.  Cut the end of the filament so that the tip is flat.

<br /><br />


Feed the tip of your filament up through the black filament guide and the clear filament guide tube.

<video controls id="filamentVideo1" class="video-js"  preload="none"  data-setup='{"fluid": true, "controls":true}' data-bind="attr: { autoplay: 'true', loop: 'true' , poster:'/plugin/mgsetup/static/img/filamentLoad1Poster.jpg'}, if:  setupStep() === '10'" onclick="this.paused ? this.play() : this.pause();" vjs-big-play-centered>
    <source src="/plugin/mgsetup/video/filamentLoad1.mp4" type='video/mp4'>
    <p class="vjs-no-js">
      To view this video please enable JavaScript, and consider upgrading to a web browser that
      <a href="http://videojs.com/html5-video-support/" target="_blank">supports HTML5 video</a>
    </p>
</video>

<br /><br />



 Next insert the filament into the hole on top of the right extruder. 

<video controls id="filamentVideo2" class="video-js"  preload="none"  data-setup='{"fluid": true}' data-bind="attr: { autoplay: 'true', loop: 'true' , poster:'/plugin/mgsetup/static/img/filamentLoad2Poster.jpg'}, if:  setupStep() === '10'" onclick="this.paused ? this.play() : this.pause();">
    <source src="/plugin/mgsetup/video/filamentLoad2.mp4" type='video/mp4'>
    <p class="vjs-no-js">
      To view this video please enable JavaScript, and consider upgrading to a web browser that
      <a href="http://videojs.com/html5-video-support/" target="_blank">supports HTML5 video</a>
    </p>
</video>
<br /><br />

Below you can see your extruder temperature. Once the extruder temperature matches the target temperature within 2 degrees,  click "Feed Filament" to start loading filament. You may need to apply slight downward pressure on the filament to get started. Once the filament has started to feed you should feel it being pulled into the extruder. 

<p style="text-align:center; font-size:25px;line-height:25px;">
    <!--Bed Temperature: <span data-bind="text: $root.displayBedTemp(), style: { color: (parseFloat($root.displayBedTemp()) < 40) ? 'green' : 'red' }"></span> / <span data-bind="text: $root.displayBedTempTarget()"></span><br>-->
    Extruder Temperature: <span data-bind="text: $root.displayTool1Temp(),  style: { color: (parseFloat($root.displayTool1Temp()) < 50) ? 'green' : 'red' }"></span> /  Target Temperature: <span data-bind="text: $root.displayTool1TempTarget()"></span><br>
</p>

<br>
<center><button title="Extrude 75mm of Filament" class="btnstay" data-bind="enable: $root.stepTenStartHeatingClicked() && $root.lockButton(), click: function() { $root.feedFilament('tool1'); $root.enableLockedButton() }, enabled: (parseFloat($root.displayTool1Temp()) > 180) ">Feed Filament</button></center>
<br>
Continue clicking "Feed Filament" until a thin strand of filament is consistently extruding from the tip of the nozzle. Use your tweezers to remove the hot filament after it has been extruded. <br><br>

Push the filament guide tube down into the plastic extruder hole. 

<video controls id="filamentVideo3" class="video-js" preload="none"   data-setup='{"fluid": true}' data-bind="attr: { autoplay: 'true', loop: 'true' , poster:'/plugin/mgsetup/static/img/filamentLoad3Poster.jpg'}, if:  setupStep() === '10'" onclick="this.paused ? this.play() : this.pause();">
    <source src="/plugin/mgsetup/video/filamentLoad3.mp4" type='video/mp4'>
    <p class="vjs-no-js">
      To view this video please enable JavaScript, and consider upgrading to a web browser that
      <a href="http://videojs.com/html5-video-support/" target="_blank">supports HTML5 video</a>
    </p>
</video>

Once filament is consistently extruding, click to proceed:<br>
<center><button class="btngoBig" data-bind="visible: loginState.isUser, click: function() { $root.goTo('11'); window.scroll(0,0) }">Next Step</button></center>
</div>

{#      88      88  
      ,d88    ,d88  
    888888  888888  
        88      88  
        88      88  
        88      88  
        88      88  
        88      88  #}
{# EEPROM Adjust EXT1 Hotend Offset #}
<div data-bind="visible: loginState.isUser && setupStep()==='11'">

<h1 style="text-align:left">Verify T1 Starting Height</h1>





<p>
   
    <i class="icon-fire" style="float:left;font-size:30px;color:red;margin-right:5px;"></i> The printer's extruder and build platform are hot - do not touch them!
</p>

<p>
    In this step you will print a small pattern on the build platform. We'll call this pattern a <em>Zigzag pattern</em> in the future. The Zigzag pattern will help you to verify your starting height. 
</p>

<em>Zigzag pattern Picture</em>

<p>
    When you click "Print First Zigzag Pattern" the printer will perform the following actions
</p>

<ol>
    <li>Wait for the Extruder and build platform to reach their target temperatures. (The printer will not move while it waits. You can see the actual temperatures in red and the target temperatures in black below the "Print First Zigzag Pattern" button)
    <li>Move to its home position
    <li>Move to its printing position
    <li>Print a small amount of material off the side of the bed
    <li>Print a Zigzag pattern in the middle of the bed with Tool 1
    <li>Move to its final position
</ol>


<p>
    When you are ready, click "Print First Zigzag Pattern"
</p>
<br>

<center><button class="btnstay" data-bind="enable: !$root.stepElevenFirstWiggleClicked(), click: function() { $root.printWiggle('T1'); $root.stepElevenFirstWiggleClicked(true); $root.enableLockedButton(8000) }">Print First Zigzag Pattern</button></center><br>



<p style="text-align:center; font-size:25px;line-height:25px;">
    Bed Temperature: <span data-bind="text: $root.displayBedTemp(), style: { color: (parseFloat($root.displayBedTemp()) < 40) ? 'green' : 'red' }"></span> / <span data-bind="text: $root.displayBedTempTarget()"></span><br>
    Extruder 1 Temperature: <span data-bind="text: $root.displayTool1Temp(),  style: { color: (parseFloat($root.displayToolTemp()) < 50) ? 'green' : 'red' }"></span> / <span data-bind="text: $root.displayTool1TempTarget()"></span><br>
</p>

Once the Zigzag pattern has printed, and the printer has fully parked, you can use your tweezers to remove any material on the side of the bed. Next, carefully remove the Zigzag pattern by using your tweezers to lift it off the bed from the rear left "tail".  How the Zigzag pattern comes off the bed tells us if the bed is level at this position:<br><br>


   
   <video controls id="filamentVideo1" class="video-js"  preload="none"     data-setup='{"fluid": true}' data-bind="attr: { autoplay: 'true', loop: 'true' , poster:'/plugin/mgsetup/static/img/wiggleposter.jpg'}, if:  setupStep() === '4'" onclick="this.paused ? this.play() : this.pause();">
    <source src="/plugin/mgsetup/video/wiggleMiddle.mp4" type='video/mp4'>
    <p class="vjs-no-js">
      To view this video please enable JavaScript, and consider upgrading to a web browser that
      <a href="http://videojs.com/html5-video-support/" target="_blank">supports HTML5 video</a>
    </p>
    </video>




<p >
    <strong style="font-size:20px;" >Which of the following options best describes your Zigzag pattern? Click the photos to zoom in.</strong>
</p>



<table>
    <tr>
        <td style="width:33%;padding:10px;border-bottom:0px;border-top:0px;border-left:2px; border-right:2px;border:solid #ddd;">
            <a href="/plugin/mgsetup/static/img/10.jpg" data-lightbox="step8"> <img data-bind="attr: {'src': '/plugin/mgsetup/static/img/10.jpg', 'width': '100%',} , visible: loginState.isUser && setupStep()==='11'" /></a>
 
        </td>

        <td style="width:33%;padding:10px;border-bottom:0px;border-top:0px;border-left:2px; border-right:2px;border:solid #ddd;">

            <a href="/plugin/mgsetup/static/img/11.jpg" data-lightbox="step8"><img data-bind="attr: {'src': '/plugin/mgsetup/static/img/11.jpg', 'width': '100%',} , visible: loginState.isUser && setupStep()==='11'" /></a>
 
        </td>
 



        <td style="width:33%;padding:10px;border-bottom:0px;border-top:0px;border-left:2px; border-right:2px;border:solid #ddd;">

             <a href="/plugin/mgsetup/static/img/12.jpg" data-lightbox="step8"> <img data-bind="attr: {'src': '/plugin/mgsetup/static/img/12.jpg', 'width': '100%',} , visible: loginState.isUser && setupStep()==='11'" /></a>
         </td>
 
    </tr>




    <tr>

        <td style="border-left:2px;border-right:2px;border-bottom:0px;border-top:0px;border:solid #ddd;">
            If the  Zigzag pattern peels off with fifty percent of the zigzag pattern as loose segments and fifty percent as connected segments, you have <strong>a perfect Starting Height</strong>. Click below to proceed to the next step. 
            <br />




            <br />

            <strong>NOTE:</strong> If the last few segments break off from the rest of the strand, don't worry - just use your tweezers to pull them off the bed. 


             
        </td>

        <td style="border-left:2px;border-right:2px;border-bottom:0px;border-top:0px;border:solid #ddd;">
                If the Zigzag pattern peels-off as an even strand made with no small section of connected segments at the end, <strong>the Starting Height is too low</strong>. Click below to adjust the starting height and print a new zigzag. 
           <!-- <br />
            <br />

            <strong>NOTE:</strong> If the last few segments break off from the rest of the strand, don't worry - just use your tweezers to pull them off the bed. -->

        </td>
        <td style="border-left:2px;border-right:2px;border-bottom:0px;border-top:0px;border:solid #ddd;">
     
            If the Zigzag pattern peels-off in one solid piece, with most/all segments of the zig-zag pattern connected, 
             <strong>the Starting Height is too high</strong>. Click below to adjust the starting height and print a new zigzag. 



        </td>
    </tr>

    <tr>

        <td style="border-bottom:0px;border-top:0px;border-left:2px; border-right:2px;border:solid #ddd;min-height:40px;">
            
            <center><button style="width:100%;" class="btngoBig" data-bind="enable: $root.stepElevenFirstWiggleClicked() && $root.lockButton(), click: function() { $root.setupSetStartingHeight('T1'); window.scroll(0,0) }">Next Step<br /></button></center>

  <!--Too far-->
        </td>


        <td style="border-bottom:0px;border-top:0px;border-left:2px; border-right:2px;border:solid #ddd;min-height:40px;">
<div data-bind="visible: $root.stepElevenShowFineAdjustments()==false"><br>
            <center><button class="btnstay" data-bind="visible: $root.stepElevenShowFineAdjustments()==false, enable: $root.stepElevenFirstWiggleClicked() && $root.lockButton(), click: function() { $root.printWiggle('T1-2',-0.04); $root.enableLockedButton(10000) }">Adjust and Print</button></center></div>
            <center><button class="btnstay" data-bind="visible: $root.stepElevenShowFineAdjustments()==true, enable: $root.stepElevenFirstWiggleClicked() && $root.lockButton(), click: function() { $root.printWiggle('T1-2',-0.04); $root.enableLockedButton(10000) }">Adjust by 0.04mm and Print</button></center><br>
            <center><button class="btnstay" data-bind="visible: $root.stepElevenShowFineAdjustments()==true, enable: $root.stepElevenFirstWiggleClicked() && $root.lockButton(), click: function() { $root.printWiggle('T1-2',-0.02); $root.enableLockedButton(10000) }">Adjust by 0.02mm and Print</button></center><br>
            <center><button class="btnstay" data-bind="visible: $root.stepElevenShowFineAdjustments()==true, enable: $root.stepElevenFirstWiggleClicked() && $root.lockButton(), click: function() { $root.printWiggle('T1-2',-0.01); $root.enableLockedButton(10000) }">Adjust by 0.01mm and Print</button></center>            

        </td>


        <td style="border-bottom:0px;border-top:0px;border-left:2px; border-right:2px;border:solid #ddd;min-height:40px;">
            <div data-bind="visible: $root.stepElevenShowFineAdjustments()==false"><br>
            <center><button class="btnstay" data-bind="visible: $root.stepElevenShowFineAdjustments()==false, enable: $root.stepElevenFirstWiggleClicked() && $root.lockButton(), click: function() { $root.printWiggle('T1-2',0.04); $root.enableLockedButton(10000) }">Adjust and Print</button></center></div>
            <center><button class="btnstay" data-bind="visible: $root.stepElevenShowFineAdjustments()==true, enable: $root.stepElevenFirstWiggleClicked() && $root.lockButton(), click: function() { $root.printWiggle('T1-2',0.04); $root.enableLockedButton(10000) }">Adjust by 0.04mm and Print</button></center><br>
            <center><button class="btnstay" data-bind="visible: $root.stepElevenShowFineAdjustments()==true, enable: $root.stepElevenFirstWiggleClicked() && $root.lockButton(), click: function() { $root.printWiggle('T1-2',0.02); $root.enableLockedButton(10000) }">Adjust by 0.02mm and Print</button></center><br>
            <center><button class="btnstay" data-bind="visible: $root.stepElevenShowFineAdjustments()==true, enable: $root.stepElevenFirstWiggleClicked() && $root.lockButton(), click: function() { $root.printWiggle('T1-2',0.01); $root.enableLockedButton(10000) }">Adjust by 0.01mm and Print</button></center>  
            <!--Too Close-->
        </td>
    <tr>

</table>


<input type="checkbox" data-bind="checked: $root.stepElevenShowFineAdjustments" /> Show the Fine Adjustment Buttons.



{# <br><br><center><button style="width:100%;" class="btngoBig" data-bind="enable: loginState.isUser, click: function() { $root.goTo('12') }">Next Step<br /></button></center> #}

</div>
{#      88   ad888888b,  
      ,d88  d8"     "88  
    888888          a8P  
        88       ,d8P"   
        88     a8P"      
        88   a8P'        
        88  d8"          
        88  88888888888  #}
{# Print Something with EXT1 Only #}
<div data-bind="visible: loginState.isUser && setupStep()==='12'">
Print a file for T1 only - parametric_spike_ring.gcode should work, and take about 16 minutes (16:14 first run).






</div>
{#      88   ad888888b,  
      ,d88  d8"     "88  
    888888          a8P  
        88       aad8"   
        88       ""Y8,   
        88          "8b  
        88  Y8,     a88  
        88   "Y888888P'  #}
{# Print with Both Extruders - MG Keychain ? #}
<div data-bind="visible: loginState.isUser && setupStep()==='13'">
Same as 12, but have the instructions have the user run a presliced .gcode file to print with both extruders, some model that will show if the X and Y offsets are close enough for general printing, or if the user needs to calibrate.  Kyle likes ooze shield for this.

User version:

Print [file] from OctoPrint.  While printing, observe the contact areas between the two colors of filament - are there large gaps between the two colors, and if so, are they consistent across the print (always on the right bottom edge, for instance)?  If so, you need to calibrate your X/Y Offset - go to 14.

If the print comes out cleanly, with no large gaps between the two colors, your X/Y Offsets are already calibrated well enough.  Go to 15.

TODO - pictures, pick and test a model, add buttons here, etc. etc.

</div>
{#      88          ,d8    
      ,d88        ,d888    
    888888      ,d8" 88    
        88    ,d8"   88    
        88  ,d8"     88    
        88  8888888888888  
        88           88    
        88           88    #}
{# Imperfection in Both Prints Requires X/Y Calibration #}
<div data-bind="visible: loginState.isUser && setupStep()==='14'">

Now we'll print a special offset pattern to determine which direction and magnitude your X offset needs to change.  When ready, click "Print Bin Set" to begin.<br><br>

<br><br><center><button style="width:100%;" class="btngoBig" data-bind="enable: loginState.isUser && !$root.sawBinPrinted(), click: function() { $root.printSawBin() }">Print Bin Set</button></center><br>


<center>
<div class="fileupload-new thumbnail" style="width: 95%; " data-bind="visible: $root.isDual">
        <img data-bind="attr: {'src': '/plugin/mgsetup/static/img/bins.png', 'width': '100%',} , visible: loginState.isUser && setupStep()==='14' && $root.calibrationStep() < 1" />
        <img data-bind="attr: {'src': '/plugin/mgsetup/static/img/saws.png', 'width': '100%',} , visible: loginState.isUser && setupStep()==='14' && $root.calibrationStep() > 0" />
</div></center><br>
<br>
<center><span data-bind="text: 'Which bin is closest to having the sawtooth perfectly centered?', visible: $root.calibrationStep() < 1"></span><span data-bind="text: 'Which sawtooth set is closest to having the verticals perfectly centered?', visible: $root.calibrationStep() > 0"></span>
</center><br><br>
<center><button style="width:20%;" class="btngoBig" data-bind="enable: loginState.isUser && $root.sawBinPrinted(), click: function() { $root.pickSawBin(1) }">1</button><button style="width:20%;" class="btngoBig" data-bind="enable: loginState.isUser && $root.sawBinPrinted(), click: function() { $root.pickSawBin(2) }">2</button><button style="width:20%;" class="btngoBig" data-bind="enable: loginState.isUser && $root.sawBinPrinted(), click: function() { $root.pickSawBin(3) }">3</button><button style="width:20%;" class="btngoBig" data-bind="enable: loginState.isUser && $root.sawBinPrinted(), click: function() { $root.pickSawBin(4) }">4</button><button style="width:20%;" class="btngoBig" data-bind="enable: loginState.isUser && $root.sawBinPrinted(), click: function() { $root.pickSawBin(5) }">5</button></center>

















{# X/Y Offset Calibration - print sawtooth bin, ask user which bin is closest to having the sawtooth centered.

If not middle bin, offset by the bin that is selected and print again.  Repeat until middle bin is selected.

Once middle bin is selected, switch to sawtooth-sawtooth 0.1 offset pattern and repeat the process.  Then switch to 0.05mm offset pattern and repeat.
 #}

</div>
{#      88  8888888888   
      ,d88  88           
    888888  88  ____     
        88  88a8PPPP8b,  
        88  PP"     `8b  
        88           d8  
        88  Y8a     a8P  
        88   "Y88888P"   #}
{# Y Calibration #}
<div data-bind="visible: loginState.isUser && setupStep()==='15'">





Now we'll repeat the process to determine which direction and magnitude your Y offset needs to change.  When ready, click "Print Bin Set" to begin.<br><br>

<br><br><center><button style="width:100%;" class="btngoBig" data-bind="enable: loginState.isUser && !$root.sawBinPrinted(), click: function() { $root.calibrationAxis('Y'), $root.printSawBin(), $root.sawBinPrinted(true) }">Print Bin Set</button></center><br>


<center>
Just...imagine these are rotated, with 1 at the bottom/front of the bed...
<div class="fileupload-new thumbnail" style="width: 95%; " data-bind="visible: $root.isDual">
        <img data-bind="attr: {'src': '/plugin/mgsetup/static/img/bins.png', 'width': '100%',} , visible: loginState.isUser && setupStep()==='15' && $root.calibrationStep() < 1" />
        <img data-bind="attr: {'src': '/plugin/mgsetup/static/img/saws.png', 'width': '100%',} , visible: loginState.isUser && setupStep()==='15' && $root.calibrationStep() > 0" />
</div></center><br>
<br>
<center><span data-bind="text: 'Which bin is closest to having the sawtooth perfectly centered?', visible: $root.calibrationStep() < 1"></span><span data-bind="text: 'Which sawtooth set is closest to having the verticals perfectly centered?', visible: $root.calibrationStep() > 0"></span>
</center><br><br>
<center><button style="width:20%;" class="btngoBig" data-bind="enable: loginState.isUser && $root.sawBinPrinted(), click: function() { $root.pickSawBin(1) }">1</button><button style="width:20%;" class="btngoBig" data-bind="enable: loginState.isUser && $root.sawBinPrinted(), click: function() { $root.pickSawBin(2) }">2</button><button style="width:20%;" class="btngoBig" data-bind="enable: loginState.isUser && $root.sawBinPrinted(), click: function() { $root.pickSawBin(3), $root.sawBinPrinted(false) }">3</button><button style="width:20%;" class="btngoBig" data-bind="enable: loginState.isUser && $root.sawBinPrinted(), click: function() { $root.pickSawBin(4) }">4</button><button style="width:20%;" class="btngoBig" data-bind="enable: loginState.isUser && $root.sawBinPrinted(), click: function() { $root.pickSawBin(5) }">5</button></center>






</div>



<div class="jog-panel" style="display: none;" data-bind="visible: loginState.isUser && setupStep()==='16'">
<h1 style="text-align:left;">Quick Check Complete</h1>
Congratulations, your M3 Dual is ready to start printing!
    Note that your printer is still hot from testing; if you are done with your printer, click below to turn off heaters. If you're ready to get started printing, you can leave the heaters on.<br>
    <center>
        <button class="btnstay" data-bind="enable: loginState.isUser(), click: function() {$root.cooldown()}">Cooldown</button>
    </center>


    <h1 style="text-align:left;">Your First Print on T1</h1>
    <!--
    <p>
        <em>How to print Video</em>
    </p>
-->


    <p>
        We've already sliced the same keychain as before for T1 - you should see 'mgkeychainT1.gco' with several buttons below it in the file menu. Press the <span class="icon-print"></span> icon to start the keychain printing on T1.
    </p>
    <img src="/plugin/mgsetup/static/img/mgkeychainT1gco.png" style="display:block;width::50%;margin-left:auto;margin-right:auto">


    <p>
        Your printer will make sure that the extruder/bed are heated correctly, and then start to print the keychain.  You can monitor your progress from the 'State' bar on the left, or from the 'Gcode Viewer' Tab. 
    </p>

<br>
    <h1 style="text-align:left;">Your First Dual Color Print</h1>
    <p>
        Once your T1 keychain is complete, and your print bed is cleared, you can print with both extruders. We've also included a different keychain that makes use of both extruders - select "mgkeychainDual.gco" for printing to start that model.
    <img src="/plugin/mgsetup/static/img/mgkeychainDualgco.png" style="display:block;width::50%;margin-left:auto;margin-right:auto">





    </p>



</div>




























<br><br><button class="arrowbtn" data-bind="visible: loginState.isUser, enable: $root.hasHistory(), click: function() {$root.stepBack()}" style="float:left;"><i class="icon-circle-arrow-left"></i></button><button class="arrowbtn" data-bind="visible: loginState.isUser, enable: $root.hasFuture(), click: function() {$root.stepForward()}" style="float:right;"><i class="icon-circle-arrow-right"></i></button><br><br><br>

<div data-bind= "visible: !$root.hideDebug()">
<input type="checkbox" data-bind="checked: $root.hideDebug" /> Hide debug options.
<hr />
Ignore everything below this statement.  And this statement.<br>

{#  88888888ba,    88888888888  88888888ba   88        88    ,ad8888ba,   
    88      `"8b   88           88      "8b  88        88   d8"'    `"8b  
    88        `8b  88           88      ,8P  88        88  d8'            
    88         88  88aaaaa      88aaaaaa8P'  88        88  88             
    88         88  88"""""      88""""""8b,  88        88  88      88888  
    88         8P  88           88      `8b  88        88  Y8,        88  
    88      .a8P   88           88      a8P  Y8a.    .a8P   Y8a.    .a88  
    88888888Y"'    88888888888  88888888P"    `"Y8888Y"'     `"Y88888P"   #}
<div>
    Which step to show:
    <div><input type="radio" name="setupStepSelect" value="0" data-bind="checked: setupStep, click: window.scroll(0,0)" /> Zero - Welcome Page</div>
    <div><input type="radio" name="setupStepSelect" value="1" data-bind="checked: setupStep, click: window.scroll(0,0)" /> One - Starting Height Check (Z head crash/gap)</div>
    <div><input type="radio" name="setupStepSelect" value="2" data-bind="checked: setupStep, click: window.scroll(0,0)" /> Two - Adjust Starting Height (cold)</div>
    <div><input type="radio" name="setupStepSelect" value="3" data-bind="checked: setupStep, click: window.scroll(0,0)" /> Three - Load Filament</div>
    <div><input type="radio" name="setupStepSelect" value="4" data-bind="checked: setupStep, click: window.scroll(0,0)" /> Four - Verify Starting Height (Wiggle)</div>
    <div><input type="radio" name="setupStepSelect" value="5" data-bind="checked: setupStep, click: window.scroll(0,0)" /> Five - Heated Corner Check (Wiggles)</div>
    <div><input type="radio" name="setupStepSelect" value="6" data-bind="checked: setupStep, click: window.scroll(0,0)" /> Six - Heated Leveling (Wiggles)</div>
    <div><input type="radio" name="setupStepSelect" value="7" data-bind="checked: setupStep, click: window.scroll(0,0)" /> Seven - Done</div>
    <div><input type="radio" name="setupStepSelect" value="8" data-bind="checked: setupStep, click: window.scroll(0,0)" /> Eight - Dual Cold Starting Height Check</div>
    <div><input type="radio" name="setupStepSelect" value="9" data-bind="checked: setupStep, click: window.scroll(0,0)" /> Nine - Dual Cold Starting Height Adjustment</div>
    <div><input type="radio" name="setupStepSelect" value="10" data-bind="checked: setupStep, click: window.scroll(0,0)" /> Ten - Dual Load Filament Extruder 1</div>
    <div><input type="radio" name="setupStepSelect" value="11" data-bind="checked: setupStep, click: window.scroll(0,0)" /> Eleven - Dual Extruder 1 Height Adjustment</div>
    <div><input type="radio" name="setupStepSelect" value="12" data-bind="checked: setupStep, click: window.scroll(0,0)" /> Twelve - Dual Extruder 1 First Print</div>
    <div><input type="radio" name="setupStepSelect" value="13" data-bind="checked: setupStep, click: window.scroll(0,0)" /> Thirteen - Dual Both Extruders Print</div>
    <div><input type="radio" name="setupStepSelect" value="14" data-bind="checked: setupStep, click: window.scroll(0,0)" /> Fourteen - Dual X Offset Calibration</div>
    <div><input type="radio" name="setupStepSelect" value="15" data-bind="checked: setupStep, click: window.scroll(0,0)" /> Fifteen - Dual Y Offset Calibration</div>
    <div><input type="radio" name="setupStepSelect" value="16" data-bind="checked: setupStep, click: window.scroll(0,0)" /> Sixteen - Done/Prints</div>


</div>
Check network connectivity again: <button data-bind="click: function() { $root.checkGoogle() }">Check Google</button><br>
Check network connectivity again: <button data-bind="click: function() { $root.checkGoogle('fail') }">Check Fail</button><br>
Check network connectivity again: <button data-bind="click: function() { $root.checkGoogle() }">Check Google</button><br>


Waiting For M503: <span data-bind="text: 'True', visible: $root.waitingForM()"></span><span data-bind="text: 'False', visible: !$root.waitingForM()"></span>
<br>Bed: <span data-bind="text: $root.displayBedTemp()"></span><br>
Tool0: <span data-bind="text: $root.displayToolTemp()"></span><br>
</div>






</div>









<!-- Templates for custom controls -->
<script type="text/html" id="customControls_containerTemplate_nameless">
    <div class="custom_section">
        <!-- ko template: { name: 'customControls_containerTemplate', data: $data } --><!-- /ko -->
    </div>
</script>
{#
<script src='https://code.responsivevoice.org/responsivevoice.src.js'></script>#}

<script type="text/html" id="customControls_containerTemplate_collapsable">
    <div class="custom_section">
        <h1 data-bind="toggleContent: { class: 'icon-caret-right icon-caret-down', parent: '.custom_section', container: '> div' }"><i data-bind="css: {'icon-caret-down': !collapsed, 'icon-caret-right': collapsed}"></i> <span data-bind="text: name"></span></h1>
        <!-- ko template: { name: 'customControls_containerTemplate', data: $data } --><!-- /ko -->
    </div>
</script>
<script type="text/html" id="customControls_containerTemplate">
    <!-- ko if: layout == 'vertical' -->
    <div class="custom_section_vertical" data-bind="template: { name: $root.displayMode, foreach: children }, css: {hide: collapsed && name}"></div>
    <!-- /ko -->

    <!-- ko if: layout == 'horizontal' -->
    <div class="custom_section_horizontal" data-bind="template: { name: $root.displayMode, foreach: children }, css: {hide: collapsed && name}"></div>
    <!-- /ko -->

    <!-- ko if: layout == 'horizontal_grid' -->
    <div class="row-fluid custom_section_horizontal_grid" data-bind="css: {hide: collapsed && name}">
        <!-- ko foreach: children -->
        <div data-bind="template: { name: $root.displayMode }, css: $root.rowCss($data)"></div>
        <!-- /ko -->
    </div>
    <!-- /ko -->
</script>
<script type="text/html" id="customControls_controlTemplate">
    <form class="form-inline custom_control">
        <!-- ko template: { name: 'customControls_controlTemplate_input', data: $data, if: $data.hasOwnProperty('input') } --><!-- /ko -->
        <!-- ko template: { name: 'customControls_controlTemplate_command', data: $data, if: $data.hasOwnProperty('command') || $data.hasOwnProperty('commands') || $data.hasOwnProperty('script') || $data.hasOwnProperty('javascript') } --><!-- /ko -->
        <!-- ko template: { name: 'customControls_controlTemplate_output', data: $data, if: $data.hasOwnProperty('output') } --><!-- /ko -->
    </form>
</script>
<script type="text/html" id="customControls_controlTemplate_input">
    <!-- ko foreach: input -->
        <label style="cursor: default" data-bind="text: name"></label>
        <!-- ko if: slider -->
            <input type="number" style="width: 100px" data-bind="slider: {value: value, min: slider.min, max: slider.max, step: slider.step}">
        <!-- /ko -->
        <!-- ko ifnot: slider -->
            <input type="text" class="input-small" data-bind="attr: {placeholder: name}, value: value">
        <!-- /ko -->
    <!-- /ko -->
</script>
<script type="text/html" id="customControls_controlTemplate_output">
    <label style="cursor: default" data-bind="text: output"></label>
</script>
<script type="text/html" id="customControls_controlTemplate_command">
    <button class="btn" data-bind="text: name, enable: $root.isCustomEnabled($data), click: function() { $root.clickCustom($data) }"></button>
</script>
<script src="{{ url_for("static", filename="js/lib/jquery/jquery.min.js") }}"></script>
<script src="{{ url_for("static", filename="js/lib/lodash.min.js") }}"></script>
<script src="/plugin/mgsetup/static/video-js/video.min.js"></script>
<script src="/plugin/mgsetup/static/js/lightbox.js"></script>
<link href="/plugin/mgsetup/static/video-js/video-js.min.css" rel="stylesheet">
<link href="/plugin/mgsetup/static/css/lightbox.css" rel="stylesheet">
<!-- End of templates for custom controls -->
